/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mib;
import oru.inf.InfDB;
import oru.inf.InfException;
import java.util.HashMap;
import java.util.Date;
import java.text.DateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import static java.lang.Integer.parseInt;
import javax.swing.JTextField;


/**
 *
 * @author filippabostrom
 */
public class RegistreraAlien extends javax.swing.JFrame {
private static InfDB idb;



    /**
     * Creates new form RegistreraAlien
     */
    public RegistreraAlien(InfDB idb) {
        initComponents();
        this.idb = idb;
        fyllBoxMedPlatsNamn(); //här anropas metoden direkt i konstruktorn så att komboboxen fylls direkt vid instansiering 
        fyllBoxMedAgentNamn(); // här anropas metoden direkt i konstruktorn så att komboBoxen fylls direkt vid instansering
        skrivInInfo.setVisible(false);
        extraInformation.setVisible(false);
        
    }
    
    public void fyllBoxMedPlatsNamn() {
        
        //metoden som fyller komboBoxen med alla plats namn som finns i listan i databasen
        
        String fraga = "SELECT benamning from plats"; // fråga som hämtar alla namn på alla platser i databasen 
        ArrayList <String> allaPlatsNamn; // lagras i en samling, en arrayList
        
        try{
            allaPlatsNamn = idb.fetchColumn(fraga); // listan allaPlatsNamn håller i alla namn som hämtats ut från frågan
            
            for(String namn: allaPlatsNamn){ // for-each-loop som snurrrar igenom hela listan 
                valjPlatsBox.addItem(namn); // och lägger till alla namnen i komboBoxen
            }
        }catch(InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel");
        }
         
        
    }
    
    
    
    public void fyllBoxMedAgentNamn() {
        
        //metoden som fyller komboBoxen (boxAnsvarigAgent) med alla agentnamn som finns i listan i databasen
        
        String fraga = "SELECT Namn from Agent"; // fråga som hämtar alla namn på agenter
        ArrayList <String> allaAgentNamn; // lagras i en samling, en arrayList
        
        try{
            allaAgentNamn = idb.fetchColumn(fraga); // listan allaAgentNamn håller i alla namn som hämtats ut från frågan
            
            for(String namn: allaAgentNamn){ // for-each-loop som snurrrar igenom hela listan 
                boxAnsvarigAgent.addItem(namn); // och lägger till alla namnen i komboBoxen
            }
        }catch(InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel");
        }
         
        
    }
    
   
    
     private boolean alienNamnFinnsRedan(JTextField rutaAttKolla){
        
        boolean namnFinns = false;
        
        try{
            
        
        String fraga = "Select namn from Alien";
        ArrayList<String> namnLista;
        namnLista = idb.fetchColumn(fraga);
        for(String namn : namnLista){
           if(namn.equals(rutaAttKolla.getText())){
               namnFinns = true;
               JOptionPane.showMessageDialog(null, "Det namnet finns redan");
           }
           return namnFinns;
        }
       }catch(InfException e){
           JOptionPane.showMessageDialog(null, "något gick fel");
       
        }
        return namnFinns;
    
    }
     
     
     
     
          
     private boolean alienIDFinnsRedan(JTextField rutaAttKolla){
        
        boolean alienIDFinns = false;
        
        try{
            
        
        String fraga = "Select Alien_ID from Alien";
        ArrayList<String> IDLista;
        IDLista = idb.fetchColumn(fraga);
        for(String id : IDLista){
           if(id.equals(rutaAttKolla.getText())){
               alienIDFinns = true;
               JOptionPane.showMessageDialog(null, "Det alienIDet finns redan, vänligen testa ett annat");
           }
           
        }
       }catch(InfException e){
           JOptionPane.showMessageDialog(null, "något gick fel");
       
        }
        return alienIDFinns;
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rubrik = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        alienID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        alienNamn = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        alienLosen = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        alienTelefon = new javax.swing.JTextField();
        boxAnsvarigAgent = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        boxRas = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        skrivInInfo = new javax.swing.JTextField();
        valjRas = new javax.swing.JButton();
        extraInformation = new javax.swing.JLabel();
        valjPlatsBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rubrik.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        rubrik.setText("Fyll i information");

        jLabel2.setText("Namn:");

        jLabel4.setText("Alien_ID:");

        jLabel5.setText("Lösenord:");

        jLabel6.setText("Telefonnummer:");

        jLabel7.setText("Välj ansvarig agent:");

        jLabel8.setText("Välj plats:");

        jLabel9.setText("Välj ras:");

        boxRas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "boglodite", "squid", "worm" }));

        jButton1.setText("Registrera");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        skrivInInfo.setColumns(6);

        valjRas.setText("Välj");
        valjRas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valjRasActionPerformed(evt);
            }
        });

        extraInformation.setText("Extra information");

        valjPlatsBox.setEditable(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rubrik)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton1)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addComponent(extraInformation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel4)
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(alienNamn, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addComponent(alienID, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addComponent(alienLosen)
                            .addComponent(alienTelefon))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boxRas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(valjPlatsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valjRas)
                    .addComponent(jLabel7)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel8))
                    .addComponent(boxAnsvarigAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(skrivInInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(rubrik)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alienID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(alienNamn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(alienLosen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(38, 38, 38))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(alienTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(skrivInInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(extraInformation))
                .addGap(23, 23, 23))
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(boxAnsvarigAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valjPlatsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boxRas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(valjRas)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        // validering som ser till att alla fält fylls i med ett värde 
        
        
        if(Validering.textFaltHarVarde(alienNamn)){
        }
        if(Validering.textFaltHarVarde(alienID)){ 
        }
         
        if(Validering.textFaltHarVarde(alienLosen)){
        }
           
        if(Validering.textFaltHarVarde(skrivInInfo)){
        }
        if(alienNamnFinnsRedan(alienNamn)) {
        }
        
        if(alienIDFinnsRedan(alienID)){
            
        }
        
        
       try{
        String namn = alienNamn.getText(); // hämtar det angivna alienNamnet
        String idet = alienID.getText(); // hämtar det angivna alienIDet
        
        // alienIdet görs sedan om till datatypen INT 
        int idInt = Integer.parseInt(idet);
        int rattID = idInt;
        
       
        String hamtaLosen = alienLosen.getText(); // hämtar det angivna lösenordet
       
        String hamtaTelefon = alienTelefon.getText(); // hämtar det angivna telefonnummret
        
        String plats = (String) valjPlatsBox.getSelectedItem().toString(); // hämtar namnet på den angivna platsen
        
        // fråga till databasen som hämtar plats_ID för det angivna platsnamnet
        // då det är ett platsID som ska läggas in i Alien tabellen
        String fragaPlats = "Select Plats_ID from Plats where Benamning =" + "'" + plats + "'";
        String resultatPlats = idb.fetchSingle(fragaPlats);
        int platsen = parseInt(resultatPlats);
        int rattPlats = platsen;
       
          
       String agentNamn = boxAnsvarigAgent.getSelectedItem().toString(); // hämtar valt Agent namn som ansvarig agent för Alien
       
       // fråga till databasen som hämtar ut agentID för den valda Agenten
       // då det är ett agentID som ska läggas in i Alien tabellen
       String fraga = "Select agent_ID from agent where Namn = " + "'" + agentNamn + "'";
       String resultat = idb.fetchSingle(fraga);
       int agentInt = Integer.parseInt(resultat);
       int rattAgentID = agentInt;
       
       
       // här sker en insert, ett tillägg till alien tabellen med en ny alien
       // i frågan till databasen skickas värden för alla kolummner med 
       String sqlQuery = "Insert into Alien " +" Values(" + rattID + ",curdate(),'"+hamtaLosen+"'," + "'" +namn+"','" +hamtaTelefon +"',"+rattPlats+ "," +rattAgentID+ ");";
       idb.insert(sqlQuery);
       
       
       // när en ny alien registreras vill man även registrera vilken ras alien är av
       
       
       
       String ras = boxRas.getSelectedItem().toString(); // hämtar vald ras från komboboxen
       String extraInfoB = skrivInInfo.getText(); // hämtar extra information till rasen
       int extraInfoBInt = Integer.parseInt(extraInfoB); // extra informationen är av datatypen Int och deklararas därför till en int
       
       //insert till databasen och ras tabellerna, beroende på vilken ras som valts
       String sqlras = "Insert into "+ ras + " Values("+rattID + ", "+ extraInfoBInt +");";
       idb.insert(sqlras);
       
       // om den valda rasen är worm ska ingen extra information läggas till, därav if-satsen
       if(ras.equals("worm")){
           String sqlRasWorm = "Insert into" +ras + " Values("+rattID+");";
           idb.insert(sqlRasWorm);
       }
       
        rubrik.setText("En ny alien är registrerad i systemet");
      
        }
        catch(InfException e) {
                JOptionPane.showMessageDialog(null, "Något gick fel");
                System.out.println("internt felmeddelande" + e.getMessage());
                }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void valjRasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valjRasActionPerformed
        
        // beroende på vilken ras man väljer så vill man lägga till olika slag av extra information
        // för att underlätta detta sker här tre olika if-satser som sätter rubriker samt textrutor synliga när en viss ras valts
        
        
        if(boxRas.getSelectedItem().equals("boglodite")) {
            extraInformation.setText("Ange antal boogies");
             extraInformation.setVisible(true);
            skrivInInfo.setVisible(true);
        }
        
        
        // om rasen Squid väljs så vill man t.ex. att texten "ange antal armar" 
        //ska bli synlig för att göra det möjligt att skriva in denna information
        if(boxRas.getSelectedItem().equals("squid")){
            extraInformation.setText("Ange antal armar");
            extraInformation.setVisible(true);
            skrivInInfo.setVisible(true);
           
        }
        
        if(boxRas.getSelectedItem().equals("worm")){
            extraInformation.setVisible(false);
            skrivInInfo.setVisible(false);
        }
    }//GEN-LAST:event_valjRasActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistreraAlien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistreraAlien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistreraAlien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistreraAlien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistreraAlien(idb).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alienID;
    private javax.swing.JTextField alienLosen;
    private javax.swing.JTextField alienNamn;
    private javax.swing.JTextField alienTelefon;
    private javax.swing.JComboBox<String> boxAnsvarigAgent;
    private javax.swing.JComboBox<String> boxRas;
    private javax.swing.JLabel extraInformation;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel rubrik;
    private javax.swing.JTextField skrivInInfo;
    private javax.swing.JComboBox<String> valjPlatsBox;
    private javax.swing.JButton valjRas;
    // End of variables declaration//GEN-END:variables
}
